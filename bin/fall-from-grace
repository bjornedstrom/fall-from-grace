#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2012 Björn Edström <be@bjrn.se>
# See LICENSE for details.

import daemon
import fcntl
import functools
import logging
import logging.handlers
import optparse
import os
import signal
import sys
import traceback

import fallfromgrace.program as fallfromgrace


log = logging.getLogger('fall-from-grace')


def configure_logging(options):
    log.setLevel(logging.DEBUG)
    if options.daemon:
        handler = logging.handlers.SysLogHandler(address='/dev/log')
        formatter = logging.Formatter('%(name)s[%(process)s]: %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
    else:
        handler = logging.StreamHandler()
    log.addHandler(handler)


def run_as_daemon(ffg, options):
    home = '/var/lib/fall-from-grace'
    if not os.path.exists(home):
        os.mkdir(home)

    # http://code.activestate.com/recipes/577911-context-manager-for-a-daemon-pid-file/
    class PidFile(object):
        """Context manager that locks a pid file.  Implemented as class
        not generator because daemon.py is calling .__exit__() with no parameters
        instead of the None, None, None specified by PEP-343."""
        # pylint: disable=R0903

        def __init__(self, path):
            self.path = path
            self.pidfile = None

        def __enter__(self):
            self.pidfile = open(self.path, "a+")
            try:
                fcntl.flock(self.pidfile.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
            except IOError:
                sys.exit(1)
            self.pidfile.seek(0)
            self.pidfile.truncate()
            self.pidfile.write(str(os.getpid()))
            self.pidfile.flush()
            self.pidfile.seek(0)
            return self.pidfile

        def __exit__(self, exc_type=None, exc_value=None, exc_tb=None):
            try:
                self.pidfile.close()
            except IOError as err:
                # ok if file was just closed elsewhere
                if err.errno != 9:
                    raise
            os.remove(self.path)

    pidfile = PidFile('/var/run/fall-from-grace.pid')
    context = daemon.DaemonContext(
        working_directory='/var/lib/fall-from-grace',
        umask=0o002,
        pidfile=pidfile
    )
    context.signal_map = {
        signal.SIGTERM: ffg.shutdown,
        signal.SIGHUP: ffg.reload,
    }
    with context:
        configure_logging(options)
        ffg.run()


def run(ffg, options):
    configure_logging(options)
    ffg.run()


def main():
    parser = optparse.OptionParser(
        usage='usage: %prog [options]')
    parser.add_option('-d', '--daemon', action='store_true', default=False, dest='daemon',
                      help='is run as daemon')
    (options, args) = parser.parse_args()

    fall_from_grace = fallfromgrace.FallFromGrace(options, args)

    if options.daemon:
        try:
            run_as_daemon(fall_from_grace, options)
        except:
            exc = traceback.format_exc()
            file('/tmp/fall-from-grace.traceback', 'w').write(exc)
    else:
        run(fall_from_grace, options)


if __name__ == '__main__':
    main()
